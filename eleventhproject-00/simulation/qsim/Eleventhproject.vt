// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2017 16:33:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Eleventh
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Eleventh_vlg_sample_tst(
	clk,
	SWC,
	sampler_tx
);
input  clk;
input [3:0] SWC;
output sampler_tx;

reg sample;
time current_time;
always @(clk or SWC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Eleventh_vlg_check_tst (
	out_num,
	sel,
	SWR,
	sampler_rx
);
input [7:0] out_num;
input  sel;
input [3:0] SWR;
input sampler_rx;

reg [7:0] out_num_expected;
reg  sel_expected;
reg [3:0] SWR_expected;

reg [7:0] out_num_prev;
reg  sel_prev;
reg [3:0] SWR_prev;

reg [7:0] out_num_expected_prev;
reg  sel_expected_prev;
reg [3:0] SWR_expected_prev;

reg [7:0] last_out_num_exp;
reg  last_sel_exp;
reg [3:0] last_SWR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_num_prev = out_num;
	sel_prev = sel;
	SWR_prev = SWR;
end

// update expected /o prevs

always @(trigger)
begin
	out_num_expected_prev = out_num_expected;
	sel_expected_prev = sel_expected;
	SWR_expected_prev = SWR_expected;
end


// expected SWR[ 3 ]
initial
begin
	SWR_expected[3] = 1'bX;
	SWR_expected[3] = #999000 1'b0;
end 
// expected SWR[ 2 ]
initial
begin
	SWR_expected[2] = 1'bX;
	SWR_expected[2] = #999000 1'b0;
end 
// expected SWR[ 1 ]
initial
begin
	SWR_expected[1] = 1'bX;
	SWR_expected[1] = #999000 1'b0;
end 
// expected SWR[ 0 ]
initial
begin
	SWR_expected[0] = 1'bX;
	SWR_expected[0] = #999000 1'b0;
end 
// expected out_num[ 7 ]
initial
begin
	out_num_expected[7] = 1'bX;
end 
// expected out_num[ 6 ]
initial
begin
	out_num_expected[6] = 1'bX;
end 
// expected out_num[ 5 ]
initial
begin
	out_num_expected[5] = 1'bX;
end 
// expected out_num[ 4 ]
initial
begin
	out_num_expected[4] = 1'bX;
end 
// expected out_num[ 3 ]
initial
begin
	out_num_expected[3] = 1'bX;
end 
// expected out_num[ 2 ]
initial
begin
	out_num_expected[2] = 1'bX;
end 
// expected out_num[ 1 ]
initial
begin
	out_num_expected[1] = 1'bX;
end 
// expected out_num[ 0 ]
initial
begin
	out_num_expected[0] = 1'bX;
end 

// expected sel
initial
begin
	sel_expected = 1'bX;
end 
// generate trigger
always @(out_num_expected or out_num or sel_expected or sel or SWR_expected or SWR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_num = %b | expected sel = %b | expected SWR = %b | ",out_num_expected_prev,sel_expected_prev,SWR_expected_prev);
	$display("| real out_num = %b | real sel = %b | real SWR = %b | ",out_num_prev,sel_prev,SWR_prev);
`endif
	if (
		( out_num_expected_prev[0] !== 1'bx ) && ( out_num_prev[0] !== out_num_expected_prev[0] )
		&& ((out_num_expected_prev[0] !== last_out_num_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[0] = out_num_expected_prev[0];
	end
	if (
		( out_num_expected_prev[1] !== 1'bx ) && ( out_num_prev[1] !== out_num_expected_prev[1] )
		&& ((out_num_expected_prev[1] !== last_out_num_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[1] = out_num_expected_prev[1];
	end
	if (
		( out_num_expected_prev[2] !== 1'bx ) && ( out_num_prev[2] !== out_num_expected_prev[2] )
		&& ((out_num_expected_prev[2] !== last_out_num_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[2] = out_num_expected_prev[2];
	end
	if (
		( out_num_expected_prev[3] !== 1'bx ) && ( out_num_prev[3] !== out_num_expected_prev[3] )
		&& ((out_num_expected_prev[3] !== last_out_num_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[3] = out_num_expected_prev[3];
	end
	if (
		( out_num_expected_prev[4] !== 1'bx ) && ( out_num_prev[4] !== out_num_expected_prev[4] )
		&& ((out_num_expected_prev[4] !== last_out_num_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[4] = out_num_expected_prev[4];
	end
	if (
		( out_num_expected_prev[5] !== 1'bx ) && ( out_num_prev[5] !== out_num_expected_prev[5] )
		&& ((out_num_expected_prev[5] !== last_out_num_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[5] = out_num_expected_prev[5];
	end
	if (
		( out_num_expected_prev[6] !== 1'bx ) && ( out_num_prev[6] !== out_num_expected_prev[6] )
		&& ((out_num_expected_prev[6] !== last_out_num_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[6] = out_num_expected_prev[6];
	end
	if (
		( out_num_expected_prev[7] !== 1'bx ) && ( out_num_prev[7] !== out_num_expected_prev[7] )
		&& ((out_num_expected_prev[7] !== last_out_num_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_num[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_num_expected_prev);
		$display ("     Real value = %b", out_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_num_exp[7] = out_num_expected_prev[7];
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( SWR_expected_prev[0] !== 1'bx ) && ( SWR_prev[0] !== SWR_expected_prev[0] )
		&& ((SWR_expected_prev[0] !== last_SWR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWR_expected_prev);
		$display ("     Real value = %b", SWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SWR_exp[0] = SWR_expected_prev[0];
	end
	if (
		( SWR_expected_prev[1] !== 1'bx ) && ( SWR_prev[1] !== SWR_expected_prev[1] )
		&& ((SWR_expected_prev[1] !== last_SWR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWR_expected_prev);
		$display ("     Real value = %b", SWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SWR_exp[1] = SWR_expected_prev[1];
	end
	if (
		( SWR_expected_prev[2] !== 1'bx ) && ( SWR_prev[2] !== SWR_expected_prev[2] )
		&& ((SWR_expected_prev[2] !== last_SWR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWR_expected_prev);
		$display ("     Real value = %b", SWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SWR_exp[2] = SWR_expected_prev[2];
	end
	if (
		( SWR_expected_prev[3] !== 1'bx ) && ( SWR_prev[3] !== SWR_expected_prev[3] )
		&& ((SWR_expected_prev[3] !== last_SWR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWR_expected_prev);
		$display ("     Real value = %b", SWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SWR_exp[3] = SWR_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Eleventh_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] SWC;
// wires                                               
wire [7:0] out_num;
wire sel;
wire [3:0] SWR;

wire sampler;                             

// assign statements (if any)                          
Eleventh i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.out_num(out_num),
	.sel(sel),
	.SWC(SWC),
	.SWR(SWR)
);
// SWC[ 3 ]
always
begin
	SWC[3] = 1'b1;
	SWC[3] = #150000 1'b0;
	#50000;
end 
// SWC[ 2 ]
initial
begin
	SWC[2] = 1'b1;
	# 100000;
	repeat(9)
	begin
		SWC[2] = 1'b0;
		SWC[2] = #50000 1'b1;
		# 150000;
	end
	SWC[2] = 1'b0;
	SWC[2] = #50000 1'b1;
end 
// SWC[ 1 ]
initial
begin
	SWC[1] = 1'b1;
	# 50000;
	repeat(9)
	begin
		SWC[1] = 1'b0;
		SWC[1] = #50000 1'b1;
		# 150000;
	end
	SWC[1] = 1'b0;
	SWC[1] = #50000 1'b1;
end 
// SWC[ 0 ]
always
begin
	SWC[0] = 1'b0;
	SWC[0] = #50000 1'b1;
	#150000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

Eleventh_vlg_sample_tst tb_sample (
	.clk(clk),
	.SWC(SWC),
	.sampler_tx(sampler)
);

Eleventh_vlg_check_tst tb_out(
	.out_num(out_num),
	.sel(sel),
	.SWR(SWR),
	.sampler_rx(sampler)
);
endmodule

